== README

This is from: https://thinkster.io/angular-rails

===#beginning-rails

Setting up a Rails app with angular. Code from flapper-example.
* Set up landing page, point to via routes.
* Place angular code into application.html.erb

===Integrating the Front-end with the Asset Pipeline
* Use Bower to manage dependencies, changes to application.js and application.css.
* Created posts and home directories in javascripts
* Move code we had in flapper-example here
* Gemfile: 'angular-rails-templates'
* Add to application.js: "//= angular-rails-templates"
* Inject the templates module into our Angular app
* ... lots

===Generating ActiveRecord Models
Add Rails ActiveRecords
* run: $ rails generate model Post title:string link:string upvotes:integer
* Run: $ rails generate model Comment body:string upvotes:integer post:references
* Declare association in post model
* Add as_json to post model
This is checkin works, but the logic in this step isn't used yet.

===Creating Routes and Controllers
Create posts and comments controllers
* Run: rails generate controller Posts --skip-assets --skip-template-engine
* Run: rails generate controller Comments --skip-assets --skip-template-engine
* Add "respond_to :json" to application_controller.rb - so its responds to json.
* In Rails4.2, need to add to Gemfile: gem 'responders', '~> 2.0'


===Wiring Everything Up
Wire front json end with Rails backend. Calling http://localhost:3000/posts.json (index) should grab all the posts in our db. 
* Inject $http into post factory (/app/assets/javascripts/posts/posts.js) and add "getAll()" - to get the records. 
* Add method for creating posts
* Call create post method from MainCtrl


===Upvoting Posts
Now the upvotes. Change again file: /app/assets/javascripts/posts/posts.js Add the following "upvote" method:
	o.upvote = function(post) {
	  return $http.put('/posts/' + post.id + '/upvote.json')
	    .success(function(data){
	      post.upvotes += 1;
	    });
	};
Then update: "incrementUpvotes()" in the controller.

===Finishing Off Comments
Final convert, getting db data and getting it to front end & vice versa.
Updating posts and comment services. Lots of twiddling.

===Adding User Authentication with Devise
Add Devise
* Add Devise to Gemfile & run "bundle install"
* Run: rails generate devise:install
* Run: rails generate devise User
* Run: rails generate migration AddUsernameToUser username:string:uniq
* Run: rake db:migrate

Let Angular have some say in Devise:
* Run: bower install angular-devise --save
* In file: application.js   Add after "angular": //= angular-devise
* Inject devise into module: 
** angular.module('flapperNews', ['ui.router', 'templates', 'Devise'])

Note: commit not working.... did commit!

===Adding a Navigation Bar and Authentication Forms
